{"version":3,"sources":["components/Cards/Card.jsx","components/Cards/Cards.jsx","components/Header/header.jsx","components/Pagination/Pagin.jsx","api/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","state","blur","this","setState","props","game","classes","GridListTileBar","onMouseOver","bind","onMouseOut","style","filter","title","name","actionIcon","IconButton","onClick","handleOpen","background_image","color","Component","withStyles","theme","fontSize","withTheme","Cards","makeStyles","image","left","position","height","transform","open","currentImg","img","handleClose","gamesListContent","games","col","length","GridList","cellHeight","cols","spacing","map","GridListTile","key","id","slug","src","alt","Dialog","maxWidth","onClose","width","DialogActions","autoFocus","useStyles","typographyStyles","flex","Header","AppBar","Toolbar","Typography","variant","className","Pagin","amount","page","count","url","currentDate","Date","toISOString","substring","handleChange","event","value","a","fetchData","data","results","lookYesterdaysGames","date","todayI","today","yesterday","setDate","getDate","Pagination","size","onChange","axios","get","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0bbdaa2d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport ZoomIn from \"@material-ui/icons/ZoomIn\";\r\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = (theme) => ({\r\n  title: {\r\n    fontSize: \"20px\",\r\n  },\r\n});\r\n\r\nclass Card extends Component {\r\n  state = {\r\n    blur: \"blur(2px)\",\r\n  };\r\n\r\n  onMouseOver() {\r\n    this.setState({ blur: \"blur(0px)\" });\r\n  }\r\n\r\n  onMouseOut() {\r\n    this.setState({ blur: \"blur(2px)\" });\r\n  }\r\n\r\n  render() {\r\n    const { game, classes } = this.props;\r\n    return (\r\n      <GridListTileBar\r\n        onMouseOver={this.onMouseOver.bind(this)}\r\n        onMouseOut={this.onMouseOut.bind(this)}\r\n        style={{ filter: this.state.blur }}\r\n        classes={{\r\n          title: classes.title,\r\n        }}\r\n        title={game.name}\r\n        actionIcon={\r\n          <IconButton\r\n            onClick={() => this.props.handleOpen(game.background_image)}\r\n          >\r\n            <ZoomIn color=\"primary\" />\r\n          </IconButton>\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles, { withTheme: true })(Card);\r\n","import React, { Component, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport FlatButton from \"@material-ui/core/Button\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Card from \"./Card\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  image: {\r\n    left: \"50%\",\r\n    position: \"relative\",\r\n    // width: \"300%\",\r\n    height: \"100%\",\r\n    transform: \"translate(-50%)\",\r\n  },\r\n});\r\n\r\nconst Task = (props) => {\r\n  const [blur, setBlur] = useState(2);\r\n\r\n  function onMouseOver() {\r\n    setBlur(0);\r\n  }\r\n\r\n  function onMouseOut() {\r\n    setBlur(2);\r\n  }\r\n\r\n  const { game } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <div style={{ filter: `blur(${blur}px)` }}>\r\n      <img\r\n        className={classes.image}\r\n        // className=\"MuiGridListTile-imgFullHeight\"\r\n        src={game.background_image}\r\n        alt={game.slug}\r\n        onMouseOver={onMouseOver.bind(this)}\r\n        onMouseOut={onMouseOut.bind(this)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nclass Cards extends Component {\r\n  state = {\r\n    open: false,\r\n    currentImg: \"\",\r\n  };\r\n  handleOpen = (img) => {\r\n    this.setState({ open: true, currentImg: img });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  render() {\r\n    let gamesListContent;\r\n    const { games } = this.props;\r\n\r\n    if (games) {\r\n      let col = 4;\r\n      if (games.length >= 4) {\r\n        col = 4;\r\n      } else {\r\n        col = games.length;\r\n      }\r\n      gamesListContent = (\r\n        <GridList cellHeight={600} cols={col} spacing={1}>\r\n          {games.map((game) => (\r\n            <GridListTile key={game.id} title={game.slug}>\r\n              <img src={game.background_image} alt={game.slug} />\r\n              {/* {<Task game={game} />} */}\r\n              <Card handleOpen={this.handleOpen.bind(this)} game={game} />\r\n            </GridListTile>\r\n          ))}\r\n        </GridList>\r\n      );\r\n    } else {\r\n      gamesListContent = null;\r\n    }\r\n    return (\r\n      <div>\r\n        {gamesListContent}\r\n        <Dialog maxWidth=\"md\" open={this.state.open} onClose={this.handleClose}>\r\n          <img src={this.state.currentImg} alt=\"\" style={{ width: \"100%\" }} />\r\n          <DialogActions>\r\n            <FlatButton autoFocus color=\"primary\" onClick={this.handleClose}>\r\n              Close\r\n            </FlatButton>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCards.propTypes = {\r\n  games: PropTypes.array.isRequired,\r\n};\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\r\nimport VideogameAssetIcon from \"@material-ui/icons/VideogameAsset\";\r\n\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  typographyStyles: {\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Header = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography variant=\"h4\" className={classes.typographyStyles}>\r\n          TODAYS GAMES\r\n        </Typography>\r\n        <VideogameAssetIcon />\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport { Cards } from \"../index\";\r\nimport { fetchData } from \"../index\";\r\nclass Pagin extends Component {\r\n  state = {\r\n    amount: 5,\r\n    page: 1,\r\n    count: 0,\r\n    url: `https://api.rawg.io/api/games?`,\r\n    currentDate: new Date().toISOString().substring(0, 10),\r\n    games: [],\r\n  };\r\n\r\n  handleChange = (event, value) => {\r\n    this.setState({ page: value }, async () => {\r\n      let data = await fetchData(this.state.page, this.state.currentDate);\r\n      if (data) {\r\n        this.setState({ games: data.results });\r\n      } else {\r\n        this.setState({ games: [] });\r\n      }\r\n    });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this.lookYesterdaysGames(this.state.currentDate, new Date());\r\n  }\r\n\r\n  async lookYesterdaysGames(date, todayI) {\r\n    let data = await fetchData(this.state.page, date);\r\n\r\n    if (data.count > 0) {\r\n      this.setState({ games: data.results, currentDate: date });\r\n      return;\r\n    } else {\r\n      let today = new Date(todayI);\r\n      let yesterday = new Date(today);\r\n      yesterday.setDate(yesterday.getDate() - 1);\r\n      this.lookYesterdaysGames(\r\n        yesterday.toISOString().substring(0, 10),\r\n        yesterday\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { games } = this.state;\r\n    return (\r\n      <div>\r\n        {games.length > 0 ? <Cards games={games} /> : null}\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%)\",\r\n          }}\r\n        >\r\n          <Pagination\r\n            size=\"large\"\r\n            count={10}\r\n            page={this.state.page}\r\n            onChange={this.handleChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pagin;\r\n","import axios from \"axios\";\r\nconst url = `https://api.rawg.io/api/games?`;\r\n\r\nconst fetchData = async (page, date) => {\r\n  date = \"2020-07-10\"\r\n  let date2 = \"2020-07-10\"\r\n  try {\r\n    const {\r\n      data\r\n    } = await axios.get(url + `page=${page}&page_size=4&dates=${date},${date2}`);\r\n    return data;\r\n  } catch (error) {}\r\n};\r\n\r\nexport default fetchData","import React from \"react\";\nimport { Header, Pagination } from \"./components\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <Pagination />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}